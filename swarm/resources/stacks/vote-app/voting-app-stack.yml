version: '3.8'

services:
    redis:
        image: redis:alpine
        ports:
            - "6369"
        networks:
            - frontend
        deploy:
            replicas: 2
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == worker]
    db:
        image: postgres:9.4
        environment:
            - POSTGRES_HOST_AUTH_METHOD=trust
        volumes:
            - db-data:/var/lib/postgres/data
        networks:
            - backend
        deploy:
            placement:
                constraints: [node.role == worker]
    vote:
        image: dockersamples/examplevotingapp_vote:before
        ports:
            - 5000:80
        networks:
            - frontend
        depends_on:
            - redis
        deploy:
            replicas: 2
            update_config:
                parallelism: 2
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == worker]
    result:
        image: dockersamples/examplevotingapp_result:before
        ports:
            - 5001:80
        networks:
            - backend
        depends_on:
            - db
        deploy:
            replicas: 1
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == worker]
    worker:
        image: dockersamples/examplevotingapp_worker
        networks:
            - frontend
            - backend
        deploy:
            mode: replicated
            replicas: 1
            labels: [APP=VOTING]
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints: [node.role == worker]

    visualizer:
        image: dockersamples/visualizer
        ports:
            - "8080:8080"
        stop_grace_period: 1m30s
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        deploy:
            placement:
                constraints: [node.role == manager]

networks:
    frontend:
        driver: overlay
    backend:
        driver: overlay

volumes:
    db-data: